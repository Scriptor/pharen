(fn one-expr ()
  1)
(check (one-expr) 1)

(local foo #one-expr)
(check ($foo) 1)

(fn one-arg (a)
    (. "Argument is " a))
(check (one-arg "this") "Argument is this")

(local foo2 #one-arg)
(check ($foo2 "this") "Argument is this")

(fn add-two-args (a b)
    (+ a b))
(check (add-two-args 133 123) 256)

(local foo3 #add-two-args)
(check ($foo3 133 123) 256)

(fn two-exprs (a b)
    (one-arg a)
    (one-arg b))
(check (two-exprs "that" "this") "Argument is this")

(fn if-inside (a)
    (if a
        "foo"
        "bar"))
(check (if-inside FALSE) "bar")

(fn default-val-arg (a [b "bar"])
  b)
(check (default-val-arg NULL) "bar")
(check (default-val-arg NULL "foo") "foo")

(fn fact (n)
  (if (== n 0)
    1
    (* n (fact (- n 1)))))
(check (fact 5) 120)

(fn iterative-fact (n acc)
    (if (== n 0)
        acc
        (iterative-fact (- n 1) (* acc n))))
(check (iterative-fact 5 1) 120)

(fn splat-usage (a &others)
  (array-sum (arr others)))
(check (splat-usage 1 2 3) 5)

(fn nested-func-test ()
  (def foo "world")
  (fn nested-func ()
    (. "hello " foo)
  (check (nested-func) "hello world"))
